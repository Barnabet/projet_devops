name: 🧪 Staging - Full Test & Promote to Production

on:
  push:
    branches: [ staging ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  PYTHON_VERSION: '3.9'

jobs:
  comprehensive-testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../tests && pip install -r requirements.txt
    
    - name: 🧪 Run All Tests
      run: |
        cd tests
        echo "🧪 Running Unit Tests..."
        python -m pytest test_unit.py -v --tb=short --junitxml=unit-results.xml
        
        echo "🔗 Running Integration Tests..."
        python -m pytest test_integration.py -v --tb=short --junitxml=integration-results.xml
        
        echo "🌐 Running End-to-End Tests..."
        python -m pytest test_e2e.py -v --tb=short --junitxml=e2e-results.xml
    
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: tests/*-results.xml
    
    - name: 🐳 Build and Test Docker Images
      run: |
        echo "🏗️ Building Docker images..."
        docker-compose build
        
        echo "🚀 Starting containers for testing..."
        docker-compose up -d
        
        echo "⏳ Waiting for containers to be ready..."
        sleep 45
        
        echo "🔍 Running container health checks..."
        curl -f http://localhost:5001/health || exit 1
        curl -f http://localhost:8080/health || exit 1
        
        echo "🧪 Running API tests..."
        # Test prediction endpoint (should handle gracefully even without model)
        curl -X POST http://localhost:5001/predict \
          -H "Content-Type: application/json" \
          -d '{"carat": 1.0, "cut": "Ideal", "color": "H", "clarity": "SI1", "depth": 61.5, "table": 55.0, "x": 6.3, "y": 6.54, "z": 4.0}' \
          || exit 1
        
        echo "✅ All container tests passed!"
        docker-compose down
    
    - name: 🔒 Security and Quality Checks
      run: |
        pip install safety bandit flake8 black isort
        
        echo "🔍 Security scan..."
        cd backend && safety check -r requirements.txt
        bandit -r backend/ -f json
        
        echo "🎨 Code quality checks..."
        black --check backend/ tests/
        isort --check-only backend/ tests/
        flake8 backend/ tests/ --max-line-length=88 --ignore=E203,W503
    
    - name: 📊 Generate Test Report
      if: always()
      run: |
        echo "## 🧪 Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Unit Tests: Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Integration Tests: Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ End-to-End Tests: Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker Build & Test: Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security Scan: Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code Quality: Verified" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **All tests passed! Ready for production deployment!**" >> $GITHUB_STEP_SUMMARY

  promote-to-production:
    name: 🚀 Promote to Production
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔧 Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
    
    - name: 🚀 Push to Production Branch (main)
      run: |
        echo "🎯 Promoting staging branch to production (main)..."
        
        # Checkout main branch
        git checkout main
        git pull origin main
        
        # Merge staging into main
        git merge origin/staging --no-ff -m "chore: promote staging to production - $(date)"
        
        # Push to main
        git push origin main
        
        echo "✅ Successfully promoted to production (main) branch!"
    
    - name: 📊 Generate Production Promotion Report
      run: |
        echo "## 🚀 Production Promotion Report" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Source**: staging branch" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Target**: main (production) branch" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Status**: Successfully promoted" >> $GITHUB_STEP_SUMMARY
        echo "- ⏳ **Next**: Production deployment will start automatically" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **Staging changes are now in production!**" >> $GITHUB_STEP_SUMMARY 